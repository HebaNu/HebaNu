print("\nSummary statistics for Working Method:")
print(method_stats)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('posts/Exploratory Data Analysis (EDA)/Industry sector and working method.xlsx')
from scipy.stats import chi2_contingency
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Perform Chi-Square test of independence
contingency_table = pd.crosstab(data[' Industry sector'], data['Working Method'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
# Check the p-value
if p < 0.05:
print("There is a significant relationship between Industry sector and Working Method.")
else:
print("There is no significant relationship between Industry sector and Working Method.")
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
View(contingency_table)
View(contingency_table)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data['Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
print(data.columns)
# Summary statistics for Industry sector
industry_stats = data['Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
print(data.columns)
# Summary statistics for Industry sector
industry_stats = data['Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
print(data.columns)
# Summary statistics for Industry sector
industry_stats = data['Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
print(data.columns)
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('posts/Exploratory Data Analysis (EDA)/Industry sector and working method.xlsx')
from scipy.stats import chi2_contingency
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Perform Chi-Square test of independence
contingency_table = pd.crosstab(data[' Industry sector'], data['Working Method'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
# Check the p-value
if p < 0.05:
print("There is a significant relationship between Industry sector and Working Method.")
else:
print("There is no significant relationship between Industry sector and Working Method.")
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
print(data.columns)
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
from scipy.stats import chi2_contingency
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Perform Chi-Square test of independence
contingency_table = pd.crosstab(data[' Industry sector'], data['Working Method'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
# Check the p-value
if p < 0.05:
print("There is a significant relationship between Industry sector and Working Method.")
else:
print("There is no significant relationship between Industry sector and Working Method.")
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
quit
reticulate::repl_python()
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Custom labels for Working Method
working_method_labels = ['Fully remote', 'Fully in-person', 'Hybrid, dominated by in-person work', 'Hybrid, dominated by remote work']
# Plotting
plt.figure(figsize=(12, 6))
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Working Method plot
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.xticks(range(len(working_method_labels)), working_method_labels)  # Set custom labels
plt.tight_layout()
plt.show()
# Perform Chi-Square test of independence
contingency_table = pd.crosstab(data[' Industry sector'], data['Working Method'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
# Check the p-value
if p < 0.05:
print("There is a significant relationship between Industry sector and Working Method.")
else:
print("There is no significant relationship between Industry sector and Working Method.")
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Custom labels for Working Method
working_method_labels = ['Fully remote', 'Fully in-person', 'Hybrid, dominated by in-person work', 'Hybrid, dominated by remote work']
# Plotting
plt.figure(figsize=(15, 6))  # Increase figure width
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Working Method plot
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.xticks(range(len(working_method_labels)), working_method_labels, rotation=45)  # Rotate labels
plt.tight_layout()
plt.show()
# Rest of your code...
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Custom labels for Working Method, with line breaks
working_method_labels = [
'Fully remote\n(working from home or another location)',
'Fully in-person\n(working at a physical office or location)',
'Hybrid, dominated by\nin-person work',
'Hybrid, dominated by\nremote work'
]
# Plotting
plt.figure(figsize=(15, 6))  # Adjust figure width as needed
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Working Method plot
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.xticks(range(len(working_method_labels)), working_method_labels)  # Updated labels
plt.tight_layout()
plt.show()
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Custom labels for Working Method, with line breaks
working_method_labels = [
'Fully remote\n(working from home or another location)',
'Fully in-person\n(working at a physical office or location)',
'Hybrid, dominated by\nin-person work',
'Hybrid, dominated by\nremote work'
]
# Plotting with adjusted figure size and subplot parameters
plt.figure(figsize=(18, 8))  # Further increase the figure size
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Working Method plot
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.xticks(range(len(working_method_labels)), working_method_labels)  # Updated labels
plt.subplots_adjust(bottom=0.15)  # Adjust bottom margin
plt.tight_layout()
plt.show()
# Rest of your code...
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Custom labels for Working Method, with line breaks
working_method_labels = [
'Fully remote\n(working from home or another location)',
'Fully in-person\n(working at a physical office or location)',
'Hybrid, dominated by\nin-person work',
'Hybrid, dominated by\nremote work'
]
# Plotting with adjusted figure size and subplot parameters
plt.figure(figsize=(18, 8))  # Further increase the figure size
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Working Method plot
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.xticks(range(len(working_method_labels)), working_method_labels)  # Updated labels
# Plotting with horizontal bar chart
plt.figure(figsize=(12, 8))  # Adjust figure size for horizontal plot
# Working Method plot (horizontal)
sns.countplot(data=data, y='Working Method')
plt.title('Distribution of Working Methods')
plt.yticks(range(len(working_method_labels)), working_method_labels)  # Set y-axis labels
plt.tight_layout()
plt.show()
# Rest of your code...
crosstab = pd.crosstab(data[' Industry sector'], data['Working Method'])
crosstab.plot(kind='bar', stacked=True)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Custom labels for Working Method, with line breaks
working_method_labels = [
'Fully remote\n(working from home or another location)',
'Fully in-person\n(working at a physical office or location)',
'Hybrid, dominated by\nin-person work',
'Hybrid, dominated by\nremote work'
]
# Plotting with adjusted figure size and subplot parameters
plt.figure(figsize=(14, 8))  # Further increase the figure size
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Working Method plot
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.xticks(range(len(working_method_labels)), working_method_labels)  # Updated labels
# Plotting with horizontal bar chart
plt.figure(figsize=(9, 8))  # Adjust figure size for horizontal plot
# Working Method plot (horizontal)
sns.countplot(data=data, y='Working Method')
plt.title('Distribution of Working Methods')
plt.yticks(range(len(working_method_labels)), working_method_labels)  # Set y-axis labels
plt.tight_layout()
plt.show()
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
# Load your dataset without specifying encoding
data = pd.read_excel('Industry sector and working method.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Plotting with adjusted figure size and subplot parameters
plt.figure(figsize=(14, 8))  # Further increase the figure size
# Industry Sector plot
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
# Plotting with horizontal bar chart
plt.figure(figsize=(6, 5))  # Adjust figure size for horizontal plot
# Working Method plot (horizontal)
sns.countplot(data=data, y='Working Method')
plt.title('Distribution of Working Methods')
plt.yticks(range(len(working_method_labels)), working_method_labels)  # Set y-axis labels
plt.tight_layout()
plt.show()
