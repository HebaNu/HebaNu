from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data['Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
print(data.columns)
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data['Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
print(data.columns)
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data[' Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
print(data.columns)
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data[' Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
# Split the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
print(data.columns)
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data[' Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
# Split the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
# Create a CategoricalNB classifier
model = CategoricalNB()
# Fit the model
model.fit(x_train.reshape(-1, 1), y_train)
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
print(data.columns)
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data[' Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
# Split the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
# Create a CategoricalNB classifier
model = CategoricalNB()
# Fit the model
model.fit(x_train.reshape(-1, 1), y_train)
# Make predictions
y_pred = model.predict(x_test.reshape(-1, 1))
# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
# Load the data
data = pd.read_excel('CategoricalNB.xlsx')
print(data.columns)
# Creating a DataFrame with the provided structure
data = pd.DataFrame({
'Industry sector': [4, 12, 20, 16, 11, 7, 15, 5, 12, 5, 9, 16, 15, 4, 12],
'Working Method': [2, 4, 2, 2, 3, 3, 3, 4, 2, 4, 1, 2, 4, 2, 4],
'Job Title': [
'Architect', 'Engineering Manager', 'Dentist', 'Dentist', 'Project Coordinator',
'Business owner', 'Assistant Professor', 'Sales Application Engineer', 'Postdoctoral fellow',
'Project Manager', 'Teaching Assistant', 'Dentist', 'Postdoc', 'Project Manager',
'Chief Executive Officer'
]
})
# Displaying the DataFrame to verify its structure
data.head()
# Encode the features and the target variable
label_encoder = LabelEncoder()
x = label_encoder.fit_transform(data[' Industry sector'])
y = label_encoder.fit_transform(data['Working Method'])
# Split the data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
# Create a CategoricalNB classifier
model = CategoricalNB()
# Fit the model
model.fit(x_train.reshape(-1, 1), y_train)
# Make predictions
y_pred = model.predict(x_test.reshape(-1, 1))
# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
# Make sure to replace 'path_to_file.xlsx' with the actual path to your Excel file
df = pd.read_excel('CategoricalNB.xlsx')
# Step 2: Encode the 'Industry sector' using one-hot encoding
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[['Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
# Make sure to replace 'path_to_file.xlsx' with the actual path to your Excel file
df = pd.read_excel('CategoricalNB.xlsx')
# Step 2: Encode the 'Industry sector' using one-hot encoding
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[['Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
# Make sure to replace 'path_to_file.xlsx' with the actual path to your Excel file
df = pd.read_excel('CategoricalNB.xlsx')
# Print the column names to check for any discrepancies
print(df.columns)
# Correct the column names in the code
# If there are spaces, you might need to change 'Industry sector' to ' Industry sector' (notice the space)
X = encoder.fit_transform(df[[' Industry sector']].values)  # Correct the column name if necessary
y = df['Working Method'].values  # Correct the column name if necessary
# Step 2: Encode the 'Industry sector' using one-hot encoding
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[['Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
# Make sure to replace 'path_to_file.xlsx' with the actual path to your Excel file
df = pd.read_excel('CategoricalNB.xlsx')
# Print the column names to check for any discrepancies
print(df.columns)
# Correct the column names in the code
# If there are spaces, you might need to change 'Industry sector' to ' Industry sector' (notice the space)
X = encoder.fit_transform(df[[' Industry sector']].values)  # Correct the column name if necessary
y = df['Working Method'].values  # Correct the column name if necessary
# Step 2: Encode the 'Industry sector' using one-hot encoding
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[['Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
# Make sure to replace 'path_to_file.xlsx' with the actual path to your Excel file
df = pd.read_excel('CategoricalNB.xlsx')
# Print the column names to check for any discrepancies
print(df.columns)
# Correct the column names in the code
# If there are spaces, you might need to change 'Industry sector' to ' Industry sector' (notice the space)
X = encoder.fit_transform(df[[' Industry sector']].values)  # Correct the column name if necessary
y = df['Working Method'].values  # Correct the column name if necessary
# Step 2: Encode the 'Industry sector' using one-hot encoding
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[['Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
# Make sure to replace 'path_to_file.xlsx' with the actual path to your Excel file
df = pd.read_excel('CategoricalNB.xlsx')
# Print the column names to check for any discrepancies
print(df.columns)
# Step 2: Encode the 'Industry sector' using one-hot encoding
# Notice the space before 'Industry sector' in the column name
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[[' Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
# Use the classification report to handle divisions by zero
print(classification_report(y_test, y_pred, zero_division=0))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
from imblearn.over_sampling import SMOTE
# Apply SMOTE to generate synthetic samples for minority class
smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X_train, y_train)
# Train the Multinomial Naive Bayes model with the balanced dataset
model.fit(X_res, y_res)
# Make predictions and evaluate the model on the original test set
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=0))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
from imblearn.over_sampling import SMOTE
pip install -U scikit-learn
from imblearn.over_sampling import SMOTE
from imblearn.over_sampling import SMOTE
# Apply SMOTE to generate synthetic samples for minority class
smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X_train, y_train)
# Train the Multinomial Naive Bayes model with the balanced dataset
model.fit(X_res, y_res)
# Make predictions and evaluate the model on the original test set
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=0))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder
# Step 1: Load the dataset
df = pd.read_excel('CategoricalNB.xlsx')
# Print the column names to check for any discrepancies
print(df.columns)
# Step 2: Encode the 'Industry sector' using one-hot encoding
# Notice the space before 'Industry sector' in the column name
encoder = OneHotEncoder(sparse=False)
X = encoder.fit_transform(df[[' Industry sector']])
# The 'Working Method' feature is your target variable
y = df['Working Method']
# Step 3: Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 4: Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 5: Make predictions and evaluate the model
y_pred = model.predict(X_test)
# Use the classification report to handle divisions by zero
print(classification_report(y_test, y_pred, zero_division=0))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
# Load your dataset
data = pd.read_csv('CategoricalNB.xlsx')
import pandas as pd
# Load your dataset
df = pd.read_excel('CategoricalNB.xlsx')
import pandas as pd
# Load your dataset
df = pd.read_excel('CategoricalNB.xlsx')
# Display the first few rows of the dataset
print(data.head())
# Get summary statistics
print(data.describe())
# Check for missing values
print(data.isnull().sum())
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_csv('CategoricalNB.xlsx')
# Check the first few rows of the dataset
print(data.head())
# Summary statistics for numerical columns (if any)
print(data.describe())
# Distribution of industry sectors
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Industry sector', palette='viridis')
plt.title('Distribution of Industry Sectors')
plt.xticks(rotation=90)
plt.show()
# Distribution of working methods
plt.figure(figsize=(8, 5))
sns.countplot(data=data, x='Working method', palette='viridis')
plt.title('Distribution of Working Methods')
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_csv('CategoricalNB.xlsx')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
# Check the first few rows of the dataset
print(data.head())
# Summary statistics for numerical columns (if any)
print(data.describe())
# Distribution of industry sectors
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Industry sector', palette='viridis')
plt.title('Distribution of Industry Sectors')
plt.xticks(rotation=90)
plt.show()
# Distribution of working methods
plt.figure(figsize=(8, 5))
sns.countplot(data=data, x='Working method', palette='viridis')
plt.title('Distribution of Working Methods')
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
# Check the first few rows of the dataset
print(data.head())
# Summary statistics for numerical columns (if any)
print(data.describe())
# Distribution of industry sectors
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Industry sector', palette='viridis')
plt.title('Distribution of Industry Sectors')
plt.xticks(rotation=90)
plt.show()
# Distribution of working methods
plt.figure(figsize=(8, 5))
sns.countplot(data=data, x='Working method', palette='viridis')
plt.title('Distribution of Working Methods')
plt.show()
cy: {accuracy_score(y_test, y_pred)}')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
# Check the first few rows of the dataset
print(data.head())
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
# Check the first few rows of the dataset
print(data.head())
# Summary statistics for numerical columns (if any)
print(data.describe())
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset (replace 'your_dataset.csv' with the actual file path)
data = pd.read_excel('CategoricalNB.xlsx')
# Check the first few rows of the dataset
print(data.head())
# Summary statistics for numerical columns (if any)
print(data.describe())
# Summary statistics for Industry sector
industry_stats = data['Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset with the correct encoding
data = pd.read_excel('CategoricalNB.xlsx', encoding='utf-8')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Load your dataset without specifying encoding
data = pd.read_excel('CategoricalNB.xlsx')
# Summary statistics for Industry sector
industry_stats = data[' Industry sector'].value_counts()
# Summary statistics for Working Method
method_stats = data['Working Method'].value_counts()
# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.countplot(data=data, x=' Industry sector')
plt.title('Distribution of Industry Sectors')
plt.subplot(1, 2, 2)
sns.countplot(data=data, x='Working Method')
plt.title('Distribution of Working Methods')
plt.tight_layout()
plt.show()
# Display summary statistics
print("Summary statistics for Industry sector:")
print(industry_stats)
print("\nSummary statistics for Working Method:")
print(method_stats)
