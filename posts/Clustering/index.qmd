---
title: "Clustering"
author: "Heba Nusair"
date: "2023-11-03"
categories: [news, code, plot]
---

Since this post doesn't specify an explicit `image`, the first image in the post will be used in the listing page of posts.

```{python}
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('xy2.csv')

# Assuming you're using 3 clusters (adjust as necessary)
kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(df[['X', 'Y']])

# Assign the cluster labels to the DataFrame
df['Cluster'] = kmeans.labels_

# Plotting the clusters
plt.scatter(df['X'], df['Y'], c=df['Cluster'], cmap='viridis')
plt.title('K-Means Clustering of Home Locations')
plt.xlabel('X (Longitude)')
plt.ylabel('Y (Latitude)')
plt.colorbar(label='Cluster Label')
plt.show()

```

\

```{python}
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('Homeplaces in Roanoke and Salem Cities.csv')

# Select only the geographic coordinates
df_geo = df[['X', 'Y']]

# Standardizing the features (important for K-Means)
scaler = StandardScaler()
df_geo_scaled = scaler.fit_transform(df_geo)

# KMeans clustering
kmeans = KMeans(n_clusters=5, n_init=10)
clusters = kmeans.fit_predict(df_geo_scaled)

# Adding cluster labels to your dataframe
df['Cluster'] = clusters

# Plotting the clusters
plt.figure(figsize=(10, 6))
plt.scatter(df['X'], df['Y'], c=df['Cluster'], cmap='viridis', marker='o')

plt.title('Geographic Distribution of Homeplaces in Roanoke and Salem Cities')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.colorbar(label='Cluster Label')
plt.show()

```
