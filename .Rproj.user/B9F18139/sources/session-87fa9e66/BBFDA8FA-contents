---
title: "Clustering"
author: "Heba Nusair"
date: "2023-11-03"
categories: [news, code, plot]
---

Since this post doesn't specify an explicit `image`, the first image in the post will be used in the listing page of posts.

```{python}
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('xy2.csv')

# Assuming you're using 3 clusters (adjust as necessary)
kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(df[['X', 'Y']])

# Assign the cluster labels to the DataFrame
df['Cluster'] = kmeans.labels_

# Plotting the clusters
plt.scatter(df['X'], df['Y'], c=df['Cluster'], cmap='viridis')
plt.title('K-Means Clustering of Home Locations')
plt.xlabel('X (Longitude)')
plt.ylabel('Y (Latitude)')
plt.colorbar(label='Cluster Label')
plt.show()

```

\

```{python}
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('Homeplaces in Roanoke and Salem Cities.csv')

# Convert categorical data to numerical
df['Employee_t'] = df['Employee_t'].astype('category').cat.codes

# Standardizing the features (important for K-Means)
ct = ColumnTransformer([
    ("norm1", StandardScaler(), ['X', 'Y']),
    ("norm2", StandardScaler(), ['Employee_t'])
], remainder='passthrough')

df_scaled = ct.fit_transform(df)

# KMeans clustering
kmeans = KMeans(n_clusters=5, n_init=10)
clusters = kmeans.fit_predict(df_scaled)

# Adding cluster labels to your dataframe
df['Cluster'] = clusters

# Plotting the clusters
plt.figure(figsize=(10, 6))
colors = ['red', 'green', 'blue', 'purple', 'orange']
for i in range(kmeans.n_clusters):
    plt.scatter(df[df['Cluster'] == i]['X'], df[df['Cluster'] == i]['Y'], 
                color=colors[i], label=f'Cluster {i}')

plt.title('Homeplaces Clustering in Roanoke and Salem Cities')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend()
plt.show()

```
