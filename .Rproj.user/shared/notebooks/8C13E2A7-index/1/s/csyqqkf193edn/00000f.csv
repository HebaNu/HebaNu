"0","import pandas as pd"
"0","from sklearn.model_selection import train_test_split"
"0","from sklearn.naive_bayes import MultinomialNB"
"0","from sklearn.metrics import classification_report, accuracy_score"
"0","from sklearn.preprocessing import OneHotEncoder"
"0",""
"0","# Step 1: Load the dataset"
"0","df = pd.read_excel('CategoricalNB.xlsx')"
"0",""
"0","# Print the column names to check for any discrepancies"
"0","print(df.columns)"
"1","Index(['Response ID', ' Industry sector', 'Working Method',
       'What is your job title?'],
      dtype='object')
"
"0","# Step 2: Encode the 'Industry sector' using one-hot encoding"
"0","# Notice the space before 'Industry sector' in the column name"
"0","encoder = OneHotEncoder(sparse=False)"
"0","X = encoder.fit_transform(df[[' Industry sector']])"
"2","C:\Users\NUSAI\ANACON~1\Lib\site-packages\sklearn\preprocessing\_encoders.py:972: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.
  warnings.warn(
"
"0","# The 'Working Method' feature is your target variable"
"0","y = df['Working Method']"
"0",""
"0","# Step 3: Split the dataset into training and test sets"
"0","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
"0",""
"0","# Step 4: Train the Multinomial Naive Bayes model"
"0","model = MultinomialNB()"
"0","model.fit(X_train, y_train)"
"1","MultinomialNB()
"
"0","# Step 5: Make predictions and evaluate the model"
"0","y_pred = model.predict(X_test)"
"0",""
"0","# Use the classification report to handle divisions by zero"
"0","print(classification_report(y_test, y_pred, zero_division=0))"
"1","              precision    recall  f1-score   support

           1       0.50      0.29      0.37        24
           2       0.47      0.91      0.62        58
           3       0.45      0.13      0.20        38
           4       0.00      0.00      0.00        18

    accuracy                           0.47       138
   macro avg       0.36      0.33      0.30       138
weighted avg       0.41      0.47      0.38       138

"
"0","print(f'Accuracy: {accuracy_score(y_test, y_pred)}')"
"1","Accuracy: 0.47101449275362317
"
