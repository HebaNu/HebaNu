"0","import pandas as pd"
"0","from sklearn.model_selection import train_test_split"
"0","from sklearn.preprocessing import StandardScaler"
"0","from sklearn.linear_model import LinearRegression"
"0","from sklearn.metrics import mean_squared_error, r2_score"
"0","import matplotlib.pyplot as plt"
"0",""
"0","# Load the dataset"
"0","data = pd.read_excel('Linear regression_WOS.xlsx')"
"0",""
"0","# Drop rows with NaN values in the area preference and income columns"
"0","data.dropna(subset=['City_center', 'Urban_area', 'Suburban_area', 'Rural_area', 'Monthly_income'], inplace=True)"
"0",""
"0","# Convert the area preferences into a single ordinal dependent variable"
"0","area_to_number = {'City_center': 1, 'Urban_area': 2, 'Suburban_area': 3, 'Rural_area': 4}"
"0","data['living_area_preference'] = data[['City_center', 'Urban_area', 'Suburban_area', 'Rural_area']].idxmin(axis=1).map(area_to_number)"
"0",""
"0","# Convert income to a continuous scale based on the provided income brackets"
"0","income_mapping = {1.0: 625, 2.0: 2292, 3.0: 5000, 4.0: 6666}  # Adjust as needed"
"0","data['continuous_income'] = data['Monthly_income'].map(income_mapping)"
"0",""
"0","# Drop the original area preference columns and the 'Monthly Income' column"
"0","data.drop(columns=['City_center', 'Urban_area', 'Suburban_area', 'Rural_area', 'Monthly_income'], inplace=True)"
"0",""
"0","# Ensure no NaN values in 'continuous_income'"
"0","data.dropna(subset=['continuous_income'], inplace=True)"
"0",""
"0","# Scale the income feature"
"0","scaler = StandardScaler()"
"0","data['scaled_income'] = scaler.fit_transform(data[['continuous_income']])"
"0",""
"0","# Prepare the features and target variable for modeling"
"0","X = data[['scaled_income']]"
"0","y = data['living_area_preference']"
"0",""
"0","# Split the data into training and testing sets"
"0","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
"0",""
"0","# Create and train the linear regression model"
"0","model = LinearRegression()"
"0","model.fit(X_train, y_train)"
"1","LinearRegression()
"
"0","# Predict on the test data"
"0","y_pred = model.predict(X_test)"
"0",""
"0","# Evaluate the model's performance"
"0","mse = mean_squared_error(y_test, y_pred)"
"0","r2 = r2_score(y_test, y_pred)"
"0",""
"0","# Output the performance metrics"
"0","print(f'Mean Squared Error: {mse}')"
"1","Mean Squared Error: 1.2229590696534407
"
"0","print(f'R-squared: {r2}')"
"1","R-squared: -0.0034801764611527286
"
"0","# Plot the regression line and the test data points"
"0","plt.scatter(X_test, y_test, color='black')"
"1","<matplotlib.collections.PathCollection object at 0x000002014DDE91D0>
"
"0","plt.plot(X_test, y_pred, color='blue', linewidth=3)"
"1","[<matplotlib.lines.Line2D object at 0x000002014E06F410>]
"
"0","plt.xlabel('Scaled Income')"
"1","Text(0.5, 0, 'Scaled Income')
"
"0","plt.ylabel('Living Area Preference')"
"1","Text(0, 0.5, 'Living Area Preference')
"
"1","Text(0.5, 1.0, 'Income vs Living Area Preference Linear Regression')
"
"0","plt.show()"
"0",""
"0",""
