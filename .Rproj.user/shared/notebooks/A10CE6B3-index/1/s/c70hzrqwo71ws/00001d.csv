"0","# Since the last execution to verify the column names did not work, let's proceed with the updated code"
"0","# for polynomial regression including the additional variable ""Distance from home to work"" and the plot."
"0",""
"0","# I will assume the column names provided are correct and update the code accordingly."
"0",""
"0","# Full code with the additional independent variable and plotting the regression curve"
"0","import pandas as pd"
"0","import numpy as np"
"0","from sklearn.model_selection import train_test_split"
"0","from sklearn.preprocessing import StandardScaler, PolynomialFeatures"
"0","from sklearn.linear_model import LinearRegression"
"0","from sklearn.metrics import mean_squared_error, r2_score"
"0","import matplotlib.pyplot as plt"
"0",""
"0","# Load the dataset"
"0","data_path = 'Income_LivingLocationPrefrences.xlsx'"
"0","data = pd.read_excel(data_path)"
"0",""
"0","# Handle NaN values"
"0","data.dropna(subset=['City_center', 'Urban_area', 'Suburban_area', 'Rural_area', 'Monthly_income', 'Distance from home to work'], inplace=True)"
"0",""
"0","# Create a new column 'living_area_preference' as the average of the Likert-scale responses"
"0","data['living_area_preference'] = data[['City_center', 'Urban_area', 'Suburban_area', 'Rural_area']].mean(axis=1)"
"0",""
"0","# Convert income to a continuous scale based on the provided income brackets"
"0","income_mapping = {1.0: 625, 2.0: 2292, 3.0: 5000, 4.0: 6666}"
"0","data['continuous_income'] = data['Monthly_income'].map(income_mapping)"
"0",""
"0","# Scale the income feature and the 'Distance from home to work' feature"
"0","scaler = StandardScaler()"
"0","data[['scaled_income', 'scaled_distance']] = scaler.fit_transform(data[['Monthly_income', 'Distance from home to work']])"
"0",""
"0","# Create polynomial features including the new variable"
"0","X = data[['scaled_income', 'scaled_distance']]"
"0","poly = PolynomialFeatures(degree=2)"
"0","X_poly = poly.fit_transform(X)"
"0",""
"0","# Split the data into training and testing sets"
"0","X_train, X_test, y_train, y_test = train_test_split(X_poly, data['living_area_preference'], test_size=0.2, random_state=42)"
"0",""
"0","# Polynomial Regression Model"
"0","poly_model = LinearRegression()"
"0","poly_model.fit(X_train, y_train)"
"1","LinearRegression()
"
"0","mse_poly = mean_squared_error(y_test, y_pred_poly)"
"0","r2_poly = r2_score(y_test, y_pred_poly)"
"0",""
"0","# Output the results for Polynomial Regression Model"
"0","print(""Polynomial Regression Model with Distance Variable:"")"
"1","Polynomial Regression Model with Distance Variable:
"
"0","print(f""Mean Squared Error: {mse_poly}"")"
"1","Mean Squared Error: 0.0
"
"1","R-squared: 1.0
"
"0","# Since we have two independent variables, we can't simply plot a 2D curve."
"0","# Instead, we'll plot the actual vs predicted values for one of the variables (scaled_income)."
"0",""
"0","# Scatter plot of actual vs predicted values"
"0","plt.scatter(X_test[:, 1], y_test, alpha=0.5, color='blue', label='Actual')  # Scaled income for x-axis"
"1","<matplotlib.collections.PathCollection object at 0x000001B18FB43C90>
"
"1","<matplotlib.collections.PathCollection object at 0x000001B18FB270D0>
"
"0","# Adding plot labels and title"
"0","plt.xlabel('Scaled Monthly Income')"
"1","Text(0.5, 34.014305555555545, 'Scaled Monthly Income')
"
"0","plt.ylabel('Predicted Living Area Preference')"
"1","Text(89.6284722222222, 0.5, 'Predicted Living Area Preference')
"
"0","plt.title('Polynomial Regression with Distance Variable: Actual vs Predicted Values')"
"1","Text(0.5, 1.0, 'Polynomial Regression with Distance Variable: Actual vs Predicted Values')
"
"0","plt.legend()"
"1","<matplotlib.legend.Legend object at 0x000001B18FB41310>
"
"0","# Show the plot"
"0","plt.show()"
"0",""
"0",""
"0",""
"0",""
