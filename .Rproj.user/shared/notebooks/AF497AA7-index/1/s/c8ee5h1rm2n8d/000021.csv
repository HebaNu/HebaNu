"0","from sklearn.cluster import DBSCAN"
"0","from sklearn.preprocessing import StandardScaler"
"0","from sklearn.neighbors import NearestNeighbors"
"0","import pandas as pd"
"0","import matplotlib.pyplot as plt"
"0","import numpy as np"
"0",""
"0","# Correct file path should be provided here"
"0","file_path = 'posts/Anomaly-outlier detection DBSCAN labels for scatter plot/WorkersHomeplacesNewUpdate.csv'"
"0",""
"0","# Load the data"
"0","df = pd.read_csv('WorkersHomeplacesNewUpdate.csv')"
"0",""
"0","# Select only the geographic coordinates"
"0","df_geo = df[['X', 'Y']]"
"0",""
"0","# Standardizing the features"
"0","scaler = StandardScaler()"
"0","df_geo_scaled = scaler.fit_transform(df_geo)"
"0",""
"0","# Plot the k-distance graph"
"0","nbrs = NearestNeighbors(n_neighbors=4).fit(df_geo_scaled)"
"0","distances, indices = nbrs.kneighbors(df_geo_scaled)"
"0",""
"0","# Sort the distances and plot them"
"0","distances = np.sort(distances, axis=0)"
"0","distances = distances[:, 3-1]"
"0","plt.figure(figsize=(12, 6))"
"1","<Figure size 1200x600 with 0 Axes>
"
"0","plt.plot(distances)"
"1","[<matplotlib.lines.Line2D object at 0x00000268880F6950>]
"
"0","plt.title('k-distance Graph')"
"1","Text(0.5, 1.0, 'k-distance Graph')
"
"0","plt.xlabel('Point index')"
"1","Text(0.5, 0, 'Point index')
"
"1","Text(0, 0.5, 'Distance to 3rd nearest neighbor')
"
"0","plt.show()"
"0",""
"0","# After identifying a new eps value from the graph, adjust eps and min_samples"
"0","eps_value = 0.05  # This is an example, adjust based on your k-distance graph"
"0","min_samples_value = 20  # This is an example, adjust based on your dataset"
"0",""
"0","# Perform DBSCAN clustering with the new parameters"
"0","dbscan = DBSCAN(eps=eps_value, min_samples=min_samples_value)"
"0","clusters = dbscan.fit_predict(df_geo_scaled)"
"0",""
"0","# Add cluster labels to the dataframe"
"0","df['Cluster'] = clusters"
"0",""
"0","# Plot the clusters with the new parameters"
"0","plt.figure(figsize=(10, 6))"
"1","<Figure size 1000x600 with 0 Axes>
"
"0","scatter = plt.scatter(df['X'], df['Y'], c=df['Cluster'], cmap='viridis', marker='o')"
"0","plt.title('Adjusted DBSCAN Clustering of Homeplaces')"
"1","Text(0.5, 1.0, 'Adjusted DBSCAN Clustering of Homeplaces')
"
"0","plt.xlabel('Longitude')"
"1","Text(0.5, 0, 'Longitude')
"
"1","Text(0, 0.5, 'Latitude')
"
"1","<matplotlib.colorbar.Colorbar object at 0x00000269052D1E50>
"
"0","plt.show()"
